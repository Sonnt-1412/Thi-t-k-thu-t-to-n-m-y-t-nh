def countPairs(n):
    if n <= 1:
        return 1
    total = 0
    for i in range(n):
        total += countPairs(i) * countPairs(n - 1 - i)
    return total

Bước 1: Tham số đầu vào là: n
Bước 2: PHép tính cơ bản: phép nhân
Bước 3: Số lần phép toán cơ bản không thay đổi với input
Bước 4: 
Gọi F(n) là đáp án của hàm countPairs(n), ta có F(n) = F(n-1) * F(0) + F(n-2) * F(1) +...+F(1) * F(n-2) + F(0) * F(n-1)
Theo công thức trên thì hàm đệ quy phải tính được mỗi F(i) 2 lần với 0 <= i <= n - 1 để tính được F(n)
Gọi T(n) là độ phức tạp thời gian của bài toán
Ta có T(n) = 2*(T(n-1) + T(n-2) + T(n-3) + ...+ T(1) + T(0))
Bước 5:
Ta có T(n) = 2*(T(n - 1) + T(n - 2) + T(n-3) +...+ T(2)+ T(1) + T(0))

           = 2*T(n-1) + 2*T(n-2) + T(n-3) +...+ T(2) + T(1) + T(0))
           = 2*T(n-1) + T(n-1)
           = 3*T(n-1)
           = 9*T(n-2)
           = 3^k*T(n - k)
           ~ 3^n * T(0) ~ 3^n
Vậy 3^n chính là độ phức tạp thời gian của bài toán